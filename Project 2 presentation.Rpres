
Project 2 Presentation
===
author: Joseph Audras & Devin Romines
date: May 13, 2019
autosize: true


Introduction
===

## Description
[summarize]
The Google Play Store Data Set is a data set containing data on over 10,000 apps in the Google Play Store for Android products. The data set looks at things such as rating, number of installations, and genre to produce a plethora of information on each app. For this project, we would like to see if the rating of the app can be accurately predicted by the variables provided in the data set.

[summarize]
The data set was gathered from https://www.kaggle.com/lava18/google-play-store-apps which was last updated 2 months ago, giving us Version 6, with which we are working.  The data was posted by Lavanya Gupta, a software engineer at HSBC Software Development in India.  More information on her can be found here https://www.kaggle.com/lava18.  The information in the data set was scraped from the Google Play Store by Lavanya Gupta, in an effort to provide similar information on its apps as is publically available from the Apple App Store so that developers may be more inclined to work in the Android market.

```{r, echo=FALSE, eval=TRUE}
library(tidyverse)
library(lubridate)
library(ggplot2)
```


Data Dictionary
===

* App - The name of the app.
* Category: Factor - The general type of app, such as Dating, Cooking, or Art and Design
* Rating: Numerical - The rating of the app on a scale from 0-5.
* Reviews: Numerical - The number of reviews that the app received.
* Installs: Numerical - The number of installations an app received.
* Price: Numerical - The Price of the app.
* Content.Rating: Factor - The rating for the app, Everyone, Everyone 10+, Mature 17+, and Teen.
* Genres: Factor - The genre of the app, Action, Action and Adventure, etc.
* Last.Updated: Factor - The date on which the app was last updated


```{r, echo=FALSE, eval=TRUE}
# Hidden data; the data cleanup code

RawData <- read.csv("googleplaystore.csv")

GooglePlayStore <- RawData[-c(10473), ]

GooglePlayStore <- GooglePlayStore[-grep("NaN", GooglePlayStore$Rating), ]

GooglePlayStore$Reviews <- as.numeric(as.character(GooglePlayStore$Reviews))


GooglePlayStore$Installs <- gsub("\\D", "", GooglePlayStore$Installs)
GooglePlayStore$Installs <- as.numeric(as.character(GooglePlayStore$Installs))

GooglePlayStore <- GooglePlayStore[, -6]

GooglePlayStore$Price <- gsub("[[:punct:]]", "", GooglePlayStore$Price)
GooglePlayStore$Price <- as.numeric(GooglePlayStore$Price)
GooglePlayStore$Price <- GooglePlayStore$Price/100

GooglePlayStore <- GooglePlayStore[, -10]

GooglePlayStore <- GooglePlayStore[, -10]

write.csv(GooglePlayStore,"Prepared_Google_Play_Store_App_Data.csv",row.names=FALSE)
```

Because we intend on making a predictive model, here we split the data into a testing and training data set.

```{r, echo=FALSE, eval=TRUE}
set.seed(42)

GooglePlayStoreTemp <- GooglePlayStore %>% mutate(id=row_number())
Train <- GooglePlayStoreTemp %>% sample_frac(0.6)
Test <- GooglePlayStoreTemp %>% anti_join(Train,by="id")
Train$id <- NULL
Test$id <- NULL
write.csv(Test,"Test.csv",row.names = FALSE)
rm(Test,GooglePlayStoreTemp)
```


Exploratory Data Analysis
===


To begin the exploratory data analysis, let's look at the data set as a whole.

```{r, echo=FALSE, eval=FALSE}
summary(Train)

pairs(Train)
```


Exploratory Data Analysis part 2
===

Now, let's look at the individual variables.

```{r, echo=FALSE, eval=FALSE}
ggplot(Train) + geom_bar(aes(x=Category)) + coord_flip()

ggplot(Train) + geom_density(aes(x=Rating),fill="light blue")

ggplot(Train) + geom_density(aes(x=log(Reviews)),fill="light green")

ggplot(Train) + geom_bar(aes(x=log(Installs)),fill="purple")

ggplot(Train) + geom_density(aes(x=log(Price)),fill="gray")

ggplot(Train) + geom_bar(aes(x=Content.Rating)) + coord_flip()
```


Exploratory Data Analysis part 3
===

Now, let's look at some of the relationships between the other variables.

```{r, echo=FALSE, eval=FALSE}
ggplot(Train) + geom_boxplot(aes(x=Content.Rating,y=log(Installs)), fill="light green")

ggplot(Train) + geom_point(aes(x=log(Price),y=log(Installs)), color="blue")
```


Broad Questions
===

### What makes a good app?

[points]
We are interested in seeing what attributes or characteristics, if any, of a particular app affect how "good" it is.  Now, "good" is a highly subjective term and with the variety of apps that exist out there, we cannot generalize them into a category of "good" and "bad".  However, for the purposes of our look into this matter, we will be defining the "good"-ness of an app by its rating on a 5 point scale.  This allows us to quantify, to some degree of accuracy, how installers felt about their experience with the app.

### Can we know in advance if an app will be good?

This question is the other side of the coin to the previous question.  Basically, if we know certain characteristics about an app, like genre, price, or content rating, then we can determine how well it will be rated by installers.  We would like to know if this can be done with any of the variables in our data set.


Narrow Questions
===

## Can we create a model that accurately predicts an app's user rating based on the number of reviews, number of installations, and price?

After exploring the data set, we found the number of reviews, number of installations, and price to have a somewhat apparent correlation with the app's user rating.  Now, we would like to see if a model can accurately predict that rating while using those variables.

## Can we create a model that accurately predicts and app's user rating based purely on variables that would be known before the app is released, such as content rating, price, or genre.?

This question is an attempt to work with the second broad question, looking purely at information about an app that does not require user data.  Such a model would be useful for app developers that wish to have some idea at an app's success before it hits the market.  This could guide their decisions on what apps to support, develop, and market.

## Discussion

We will be creating two predictive models for our data set to hopefully predict the user rating.  The first will be based on the number of reviews, number of installations, and price, and is hoping to just get a model that is accurate for both the train and test data.  The second model will be based solely on non-user information, such as content rating, genre, and price, and will hopefully be able to provide accurate predictions for both the train and test data.

## Modeling/Hypothesis Testing

Model 1 (reviews, installs, and price)

```{r, echo=FALSE, eval=FALSE}
Model1 <- lm(Rating ~ I(log())
```



Conclusion
===

[summarize]
It appears from the data that the Reviews variable seems quite positively related to the Ratings variable.  While ratings of 5 can be achieved across all Review amounts, they seem to be more common with higher Review amounts.  The same can be said for the Installs variable, in that the more installations a particular app receives could correlate to the rating it is given.  The Price appears to have essentially the opposite effect.  With the exception of free apps, lower priced apps appear to earn higher rating scores thant more expensive apps.  Content rating does not appear to affect an app's rating.

With regard to the other relationships explored, Content Rating seemd very equal across app installations, with apps rated as Everyone had the most variance, probably due to the fact that most of the apps in the data set are rated Everyone, as seen by the Content Rating bar plot earlier.  When price was compared to installations, an almost bubble appeared in the bottom right portion of the plot, indicating that less expensive apps might warrent more installations from users.

Moving forward, we feel that the model we are aiming to create should include the Review, Installs, and Price variables, possibly Genres and Category as well.

